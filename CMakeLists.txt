cmake_minimum_required(VERSION 3.16)

project(Optimiser VERSION 0.1 LANGUAGES CXX)

# Enable automatic processing of .ui, .moc, and .qrc
set(CMAKE_AUTOUIC   ON)
set(CMAKE_AUTOMOC   ON)
set(CMAKE_AUTORCC   ON)

# C++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Qt Widgets
find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

# Python embedding
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)

# Your hand-written sources
set(PROJECT_SOURCES
    main.cpp
    python_utils.cpp

    menu.cpp
    linear.cpp
    multivariable.cpp
    ga.cpp
    constrained.cpp
    multiobjective.cpp
    wing.cpp
    manufacturing.cpp
)

# Your hand-written headers
set(PROJECT_HEADERS
    python_utils.h
    menu.h
    linear.h
    multivariable.h
    ga.h
    constrained.h
    multiobjective.h
    wing.h
    manufacturing.h
)

# Qt Designer .ui forms (AUTOUIC will generate ui_*.h from these)
set(PROJECT_FORMS
    menu.ui
    linear.ui
    multivariable.ui
    ga.ui
    constrained.ui
    multiobjective.ui
    wing.ui
    manufacturing.ui
)

# Build either a library (for Android) or an executable
if(ANDROID)
    add_library(Optimiser SHARED
        ${PROJECT_SOURCES}
        ${PROJECT_HEADERS}
        ${PROJECT_FORMS}
    )
else()
    qt_add_executable(Optimiser
        ${PROJECT_SOURCES}
        ${PROJECT_HEADERS}
        ${PROJECT_FORMS}
    )
endif()

# Link against Qt Widgets and the Python runtime
target_link_libraries(Optimiser
    PRIVATE
        Qt${QT_VERSION_MAJOR}::Widgets
        Python3::Python
)

# Tell the compiler where to find the autogenerated ui_*.h files
target_include_directories(Optimiser
    PRIVATE
        ${CMAKE_CURRENT_BINARY_DIR}
)

# macOS bundle settings (optional, from your original file)
if(${QT_VERSION} VERSION_LESS 6.1.0)
    set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.Optimiser)
endif()
set_target_properties(Optimiser PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION        ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING  ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE                      TRUE
    WIN32_EXECUTABLE                   TRUE
)

include(GNUInstallDirs)
install(TARGETS Optimiser
    BUNDLE   DESTINATION .
    LIBRARY  DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME  DESTINATION ${CMAKE_INSTALL_BINDIR}
)

# Finalize for Qt6
if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(Optimiser)
endif()
